
Users:

	u ∈ U

	source(u)

	destination(u)

	earliest_depart(u)

	latest_arrive(u)

	driver(u) [yes/no/flexible]

	available_seats(u)

	walking_distance(u)

Locations:

	i, j ∈ L

	distance(i, j)

	drive_time(i, j)

	walk_time(i, j)

Routes:

	route(u, i, j) ∈ {0, 1}

	fan_in(u, i) = ∑ j ∈ L: route(u, j, i)

	fan_out(u, i) = ∑ j ∈ L: route(u, i, j)

	fan_out(u, i) - fan_in(u, i) = 1 when i = source(u)
				     = -1 when i = destination(u)
				     = 0 otherwise

Drivers:

	drives(d, u)   d, u ∈ U

	drives(d, u) < driver(d) for d, u ∈ U

	∑ d ∈ U: drives(d, u) <= 1 for u ∈ U

	∑ u ∈ U: drives(d, u) <= available_seats(d) for d ∈ U

Walking:

	riding(i, j, u) = ∑ d ∈ U: route(i, j, d) when drives(d, u)

	walking(i, j, u) = 1 - riding(i, j, u)

Times:

	departure(u)   u ∈ U
	arrival(u)   u ∈ U

	earliest_depart(u) <= departure(u)
	departure <= arrival(u)
	arrival(u) <= latest_arrive(u)

Goal:

	minimize ∑ u ∈ U: ∑ i ∈ L: ∑ j ∈ L: route(u, i, j) * distance(i, j)

	

	

	

	

	


	

	

	
