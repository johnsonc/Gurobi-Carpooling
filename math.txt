
Users:

	u ∈ U

	source(u)

	destination(u)

	earliest_depart(u)

	latest_arrive(u)

	wants_to_drive(u) [yes/no/flex]

	available_seats(u)

	walking_distance(u)

Locations:

	i, j ∈ L

	distance(i, j)

	drive_time(i, j)

	walk_time(i, j)

Routes:

	route(u, i, j) ∈ {0, 1}

	fan_in(u, i) = ∑ j ∈ L: route(u, j, i)

	fan_out(u, i) = ∑ j ∈ L: route(u, i, j)

	fan_out(u, i) - fan_in(u, i) = 1 when i = source(u)
				     = -1 when i = destination(u)
				     = 0 otherwise

Drivers:

	d, u ∈ U

	driver(u) ∈ {0, 1}

	driver(u) = 0 when wants_to_drive(u) = "no"
		  = 1 when wants_to_drive(u) = "yes"

	drives(d, u) ∈ {0, 1}

	drives(d, u) == driver(d) when d = u
		     <= driver(d) otherwise

	∑ d ∈ U: drives(d, u) <= 1

	∑ u ∈ U: drives(d, u) <= available_seats(d)

	route_as_driver(u, i, j) ∈ {0, 1}

	route_as_driver(u, i, j) >= -1 + route(u, i, j) + driver(u)

Walking:

	route_by_car(u, i, j) ∈ {0, 1}

	route_by_car(u, i, j) <= route(d, i, j) + (1 - drives(d, u))

	route_by_walk(u, i, j) ∈ {0, 1}

	route_by_walk(u, i, j) >= -1 + route(u, i, j) + (1 - route_by_car(u, i, j))

	∑ i, j ∈ L: route_by_walk(u, i, j) * distance(i, j) <= walking_distance(u)

Times:

	departure(u)   u ∈ U
	arrival(u)   u ∈ U

	earliest_depart(u) <= departure(u)
	departure <= arrival(u)
	arrival(u) <= latest_arrive(u)

Goal:

	minimize ∑ u ∈ U: ∑ i ∈ L: ∑ j ∈ L: route_as_driver(u, i, j) * distance(i, j)

	

	

	

	

	


	

	

	
